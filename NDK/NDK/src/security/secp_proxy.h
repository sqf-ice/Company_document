/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_nl_secp_interface
#define DBUS_GLIB_CLIENT_WRAPPERS_nl_secp_interface

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
nl_secp_interface_request (DBusGProxy *proxy, const gint IN_action_id, const GArray* IN_input_garray, GArray** OUT_output_garray, gint* OUT_result, GError **error)

{
  return dbus_g_proxy_call (proxy, "request", error, G_TYPE_INT, IN_action_id, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_input_garray, G_TYPE_INVALID, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), OUT_output_garray, G_TYPE_INT, OUT_result, G_TYPE_INVALID);
}

typedef void (*nl_secp_interface_request_reply) (DBusGProxy *proxy, GArray *OUT_output_garray, gint OUT_result, GError *error, gpointer userdata);

static void
nl_secp_interface_request_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GArray* OUT_output_garray;
  gint OUT_result;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), &OUT_output_garray, G_TYPE_INT, &OUT_result, G_TYPE_INVALID);
  (*(nl_secp_interface_request_reply)data->cb) (proxy, OUT_output_garray, OUT_result, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
nl_secp_interface_request_async (DBusGProxy *proxy, const gint IN_action_id, const GArray* IN_input_garray, nl_secp_interface_request_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "request", nl_secp_interface_request_async_callback, stuff, g_free, G_TYPE_INT, IN_action_id, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_input_garray, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_nl_secp_interface */

G_END_DECLS
